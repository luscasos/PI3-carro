
PI3 carro ucontrolador.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080011d8  080011d8  000111d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080011f8  080011f8  000111f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080011fc  080011fc  000111fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000060  2000000c  0800120c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000006c  0800120c  0002006c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d756  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001c38  00000000  00000000  0002d78b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004709  00000000  00000000  0002f3c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000670  00000000  00000000  00033ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000878  00000000  00000000  00034140  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000387e  00000000  00000000  000349b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002b34  00000000  00000000  00038236  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003ad6a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001248  00000000  00000000  0003ade8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080011c0 	.word	0x080011c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080011c0 	.word	0x080011c0

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f880 	bl	8000268 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f842 	bl	8000200 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f81b 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f000 ff1e 	bl	8000fec <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000028 	.word	0x20000028
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000028 	.word	0x20000028

080001dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001de:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001ea:	041b      	lsls	r3, r3, #16
 80001ec:	0c1b      	lsrs	r3, r3, #16
 80001ee:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001f6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001f8:	60d3      	str	r3, [r2, #12]
 80001fa:	4770      	bx	lr
 80001fc:	e000ed00 	.word	0xe000ed00

08000200 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000202:	b530      	push	{r4, r5, lr}
 8000204:	68dc      	ldr	r4, [r3, #12]
 8000206:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800020a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800020e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000210:	2b04      	cmp	r3, #4
 8000212:	bf28      	it	cs
 8000214:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000216:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000218:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800021c:	bf98      	it	ls
 800021e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000220:	fa05 f303 	lsl.w	r3, r5, r3
 8000224:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000228:	bf88      	it	hi
 800022a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800022c:	4019      	ands	r1, r3
 800022e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000230:	fa05 f404 	lsl.w	r4, r5, r4
 8000234:	3c01      	subs	r4, #1
 8000236:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000238:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023a:	ea42 0201 	orr.w	r2, r2, r1
 800023e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000242:	bfaf      	iteee	ge
 8000244:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	4b06      	ldrlt	r3, [pc, #24]	; (8000264 <HAL_NVIC_SetPriority+0x64>)
 800024a:	f000 000f 	andlt.w	r0, r0, #15
 800024e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	bfa5      	ittet	ge
 8000252:	b2d2      	uxtbge	r2, r2
 8000254:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800025e:	bd30      	pop	{r4, r5, pc}
 8000260:	e000ed00 	.word	0xe000ed00
 8000264:	e000ed14 	.word	0xe000ed14

08000268 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000268:	3801      	subs	r0, #1
 800026a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800026e:	d20a      	bcs.n	8000286 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000270:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000272:	4b06      	ldr	r3, [pc, #24]	; (800028c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	4a06      	ldr	r2, [pc, #24]	; (8000290 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000276:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000278:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800027c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800027e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000280:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000286:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	e000e010 	.word	0xe000e010
 8000290:	e000ed00 	.word	0xe000ed00

08000294 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000298:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800029a:	4616      	mov	r6, r2
 800029c:	4b65      	ldr	r3, [pc, #404]	; (8000434 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800029e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000444 <HAL_GPIO_Init+0x1b0>
 80002a2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000448 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002a6:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002aa:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002ac:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002b0:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002b4:	45a0      	cmp	r8, r4
 80002b6:	d17f      	bne.n	80003b8 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002b8:	684d      	ldr	r5, [r1, #4]
 80002ba:	2d12      	cmp	r5, #18
 80002bc:	f000 80af 	beq.w	800041e <HAL_GPIO_Init+0x18a>
 80002c0:	f200 8088 	bhi.w	80003d4 <HAL_GPIO_Init+0x140>
 80002c4:	2d02      	cmp	r5, #2
 80002c6:	f000 80a7 	beq.w	8000418 <HAL_GPIO_Init+0x184>
 80002ca:	d87c      	bhi.n	80003c6 <HAL_GPIO_Init+0x132>
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	f000 808e 	beq.w	80003ee <HAL_GPIO_Init+0x15a>
 80002d2:	2d01      	cmp	r5, #1
 80002d4:	f000 809e 	beq.w	8000414 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002d8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002dc:	2cff      	cmp	r4, #255	; 0xff
 80002de:	bf93      	iteet	ls
 80002e0:	4682      	movls	sl, r0
 80002e2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80002e6:	3d08      	subhi	r5, #8
 80002e8:	f8d0 b000 	ldrls.w	fp, [r0]
 80002ec:	bf92      	itee	ls
 80002ee:	00b5      	lslls	r5, r6, #2
 80002f0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80002f4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002f6:	fa09 f805 	lsl.w	r8, r9, r5
 80002fa:	ea2b 0808 	bic.w	r8, fp, r8
 80002fe:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000302:	bf88      	it	hi
 8000304:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000308:	ea48 0505 	orr.w	r5, r8, r5
 800030c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000310:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000314:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000318:	d04e      	beq.n	80003b8 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800031a:	4d47      	ldr	r5, [pc, #284]	; (8000438 <HAL_GPIO_Init+0x1a4>)
 800031c:	4f46      	ldr	r7, [pc, #280]	; (8000438 <HAL_GPIO_Init+0x1a4>)
 800031e:	69ad      	ldr	r5, [r5, #24]
 8000320:	f026 0803 	bic.w	r8, r6, #3
 8000324:	f045 0501 	orr.w	r5, r5, #1
 8000328:	61bd      	str	r5, [r7, #24]
 800032a:	69bd      	ldr	r5, [r7, #24]
 800032c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000330:	f005 0501 	and.w	r5, r5, #1
 8000334:	9501      	str	r5, [sp, #4]
 8000336:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800033a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800033e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000340:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000344:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000348:	fa09 f90b 	lsl.w	r9, r9, fp
 800034c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000350:	4d3a      	ldr	r5, [pc, #232]	; (800043c <HAL_GPIO_Init+0x1a8>)
 8000352:	42a8      	cmp	r0, r5
 8000354:	d068      	beq.n	8000428 <HAL_GPIO_Init+0x194>
 8000356:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800035a:	42a8      	cmp	r0, r5
 800035c:	d066      	beq.n	800042c <HAL_GPIO_Init+0x198>
 800035e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000362:	42a8      	cmp	r0, r5
 8000364:	d064      	beq.n	8000430 <HAL_GPIO_Init+0x19c>
 8000366:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800036a:	42a8      	cmp	r0, r5
 800036c:	bf0c      	ite	eq
 800036e:	2503      	moveq	r5, #3
 8000370:	2504      	movne	r5, #4
 8000372:	fa05 f50b 	lsl.w	r5, r5, fp
 8000376:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800037a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800037e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000380:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000384:	bf14      	ite	ne
 8000386:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000388:	43a5      	biceq	r5, r4
 800038a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800038c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800038e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000392:	bf14      	ite	ne
 8000394:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000396:	43a5      	biceq	r5, r4
 8000398:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800039a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800039c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003a0:	bf14      	ite	ne
 80003a2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003a4:	43a5      	biceq	r5, r4
 80003a6:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003a8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003aa:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003ae:	bf14      	ite	ne
 80003b0:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003b2:	ea25 0404 	biceq.w	r4, r5, r4
 80003b6:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003b8:	3601      	adds	r6, #1
 80003ba:	2e10      	cmp	r6, #16
 80003bc:	f47f af73 	bne.w	80002a6 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003c0:	b003      	add	sp, #12
 80003c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003c6:	2d03      	cmp	r5, #3
 80003c8:	d022      	beq.n	8000410 <HAL_GPIO_Init+0x17c>
 80003ca:	2d11      	cmp	r5, #17
 80003cc:	d184      	bne.n	80002d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003ce:	68ca      	ldr	r2, [r1, #12]
 80003d0:	3204      	adds	r2, #4
          break;
 80003d2:	e781      	b.n	80002d8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80003d4:	4f1a      	ldr	r7, [pc, #104]	; (8000440 <HAL_GPIO_Init+0x1ac>)
 80003d6:	42bd      	cmp	r5, r7
 80003d8:	d009      	beq.n	80003ee <HAL_GPIO_Init+0x15a>
 80003da:	d812      	bhi.n	8000402 <HAL_GPIO_Init+0x16e>
 80003dc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800044c <HAL_GPIO_Init+0x1b8>
 80003e0:	454d      	cmp	r5, r9
 80003e2:	d004      	beq.n	80003ee <HAL_GPIO_Init+0x15a>
 80003e4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80003e8:	454d      	cmp	r5, r9
 80003ea:	f47f af75 	bne.w	80002d8 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80003ee:	688a      	ldr	r2, [r1, #8]
 80003f0:	b1c2      	cbz	r2, 8000424 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80003f2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80003f4:	bf0c      	ite	eq
 80003f6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80003fa:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80003fe:	2208      	movs	r2, #8
 8000400:	e76a      	b.n	80002d8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000402:	4575      	cmp	r5, lr
 8000404:	d0f3      	beq.n	80003ee <HAL_GPIO_Init+0x15a>
 8000406:	4565      	cmp	r5, ip
 8000408:	d0f1      	beq.n	80003ee <HAL_GPIO_Init+0x15a>
 800040a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000450 <HAL_GPIO_Init+0x1bc>
 800040e:	e7eb      	b.n	80003e8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000410:	2200      	movs	r2, #0
 8000412:	e761      	b.n	80002d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000414:	68ca      	ldr	r2, [r1, #12]
          break;
 8000416:	e75f      	b.n	80002d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000418:	68ca      	ldr	r2, [r1, #12]
 800041a:	3208      	adds	r2, #8
          break;
 800041c:	e75c      	b.n	80002d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800041e:	68ca      	ldr	r2, [r1, #12]
 8000420:	320c      	adds	r2, #12
          break;
 8000422:	e759      	b.n	80002d8 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000424:	2204      	movs	r2, #4
 8000426:	e757      	b.n	80002d8 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000428:	2500      	movs	r5, #0
 800042a:	e7a2      	b.n	8000372 <HAL_GPIO_Init+0xde>
 800042c:	2501      	movs	r5, #1
 800042e:	e7a0      	b.n	8000372 <HAL_GPIO_Init+0xde>
 8000430:	2502      	movs	r5, #2
 8000432:	e79e      	b.n	8000372 <HAL_GPIO_Init+0xde>
 8000434:	40010400 	.word	0x40010400
 8000438:	40021000 	.word	0x40021000
 800043c:	40010800 	.word	0x40010800
 8000440:	10210000 	.word	0x10210000
 8000444:	10310000 	.word	0x10310000
 8000448:	10320000 	.word	0x10320000
 800044c:	10110000 	.word	0x10110000
 8000450:	10220000 	.word	0x10220000

08000454 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000454:	6803      	ldr	r3, [r0, #0]
{
 8000456:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800045a:	07db      	lsls	r3, r3, #31
{
 800045c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800045e:	d410      	bmi.n	8000482 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000460:	682b      	ldr	r3, [r5, #0]
 8000462:	079f      	lsls	r7, r3, #30
 8000464:	d45e      	bmi.n	8000524 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000466:	682b      	ldr	r3, [r5, #0]
 8000468:	0719      	lsls	r1, r3, #28
 800046a:	f100 8095 	bmi.w	8000598 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800046e:	682b      	ldr	r3, [r5, #0]
 8000470:	075a      	lsls	r2, r3, #29
 8000472:	f100 80bf 	bmi.w	80005f4 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000476:	69ea      	ldr	r2, [r5, #28]
 8000478:	2a00      	cmp	r2, #0
 800047a:	f040 812d 	bne.w	80006d8 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800047e:	2000      	movs	r0, #0
 8000480:	e014      	b.n	80004ac <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000482:	4c90      	ldr	r4, [pc, #576]	; (80006c4 <HAL_RCC_OscConfig+0x270>)
 8000484:	6863      	ldr	r3, [r4, #4]
 8000486:	f003 030c 	and.w	r3, r3, #12
 800048a:	2b04      	cmp	r3, #4
 800048c:	d007      	beq.n	800049e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800048e:	6863      	ldr	r3, [r4, #4]
 8000490:	f003 030c 	and.w	r3, r3, #12
 8000494:	2b08      	cmp	r3, #8
 8000496:	d10c      	bne.n	80004b2 <HAL_RCC_OscConfig+0x5e>
 8000498:	6863      	ldr	r3, [r4, #4]
 800049a:	03de      	lsls	r6, r3, #15
 800049c:	d509      	bpl.n	80004b2 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800049e:	6823      	ldr	r3, [r4, #0]
 80004a0:	039c      	lsls	r4, r3, #14
 80004a2:	d5dd      	bpl.n	8000460 <HAL_RCC_OscConfig+0xc>
 80004a4:	686b      	ldr	r3, [r5, #4]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d1da      	bne.n	8000460 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80004aa:	2001      	movs	r0, #1
}
 80004ac:	b002      	add	sp, #8
 80004ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004b2:	686b      	ldr	r3, [r5, #4]
 80004b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004b8:	d110      	bne.n	80004dc <HAL_RCC_OscConfig+0x88>
 80004ba:	6823      	ldr	r3, [r4, #0]
 80004bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004c0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80004c2:	f7ff fe85 	bl	80001d0 <HAL_GetTick>
 80004c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80004c8:	6823      	ldr	r3, [r4, #0]
 80004ca:	0398      	lsls	r0, r3, #14
 80004cc:	d4c8      	bmi.n	8000460 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80004ce:	f7ff fe7f 	bl	80001d0 <HAL_GetTick>
 80004d2:	1b80      	subs	r0, r0, r6
 80004d4:	2864      	cmp	r0, #100	; 0x64
 80004d6:	d9f7      	bls.n	80004c8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80004d8:	2003      	movs	r0, #3
 80004da:	e7e7      	b.n	80004ac <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004dc:	b99b      	cbnz	r3, 8000506 <HAL_RCC_OscConfig+0xb2>
 80004de:	6823      	ldr	r3, [r4, #0]
 80004e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004e4:	6023      	str	r3, [r4, #0]
 80004e6:	6823      	ldr	r3, [r4, #0]
 80004e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004ec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80004ee:	f7ff fe6f 	bl	80001d0 <HAL_GetTick>
 80004f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80004f4:	6823      	ldr	r3, [r4, #0]
 80004f6:	0399      	lsls	r1, r3, #14
 80004f8:	d5b2      	bpl.n	8000460 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80004fa:	f7ff fe69 	bl	80001d0 <HAL_GetTick>
 80004fe:	1b80      	subs	r0, r0, r6
 8000500:	2864      	cmp	r0, #100	; 0x64
 8000502:	d9f7      	bls.n	80004f4 <HAL_RCC_OscConfig+0xa0>
 8000504:	e7e8      	b.n	80004d8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000506:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800050a:	6823      	ldr	r3, [r4, #0]
 800050c:	d103      	bne.n	8000516 <HAL_RCC_OscConfig+0xc2>
 800050e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000512:	6023      	str	r3, [r4, #0]
 8000514:	e7d1      	b.n	80004ba <HAL_RCC_OscConfig+0x66>
 8000516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800051a:	6023      	str	r3, [r4, #0]
 800051c:	6823      	ldr	r3, [r4, #0]
 800051e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000522:	e7cd      	b.n	80004c0 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000524:	4c67      	ldr	r4, [pc, #412]	; (80006c4 <HAL_RCC_OscConfig+0x270>)
 8000526:	6863      	ldr	r3, [r4, #4]
 8000528:	f013 0f0c 	tst.w	r3, #12
 800052c:	d007      	beq.n	800053e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800052e:	6863      	ldr	r3, [r4, #4]
 8000530:	f003 030c 	and.w	r3, r3, #12
 8000534:	2b08      	cmp	r3, #8
 8000536:	d110      	bne.n	800055a <HAL_RCC_OscConfig+0x106>
 8000538:	6863      	ldr	r3, [r4, #4]
 800053a:	03da      	lsls	r2, r3, #15
 800053c:	d40d      	bmi.n	800055a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800053e:	6823      	ldr	r3, [r4, #0]
 8000540:	079b      	lsls	r3, r3, #30
 8000542:	d502      	bpl.n	800054a <HAL_RCC_OscConfig+0xf6>
 8000544:	692b      	ldr	r3, [r5, #16]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d1af      	bne.n	80004aa <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800054a:	6823      	ldr	r3, [r4, #0]
 800054c:	696a      	ldr	r2, [r5, #20]
 800054e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000552:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000556:	6023      	str	r3, [r4, #0]
 8000558:	e785      	b.n	8000466 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800055a:	692a      	ldr	r2, [r5, #16]
 800055c:	4b5a      	ldr	r3, [pc, #360]	; (80006c8 <HAL_RCC_OscConfig+0x274>)
 800055e:	b16a      	cbz	r2, 800057c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000560:	2201      	movs	r2, #1
 8000562:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000564:	f7ff fe34 	bl	80001d0 <HAL_GetTick>
 8000568:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800056a:	6823      	ldr	r3, [r4, #0]
 800056c:	079f      	lsls	r7, r3, #30
 800056e:	d4ec      	bmi.n	800054a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000570:	f7ff fe2e 	bl	80001d0 <HAL_GetTick>
 8000574:	1b80      	subs	r0, r0, r6
 8000576:	2802      	cmp	r0, #2
 8000578:	d9f7      	bls.n	800056a <HAL_RCC_OscConfig+0x116>
 800057a:	e7ad      	b.n	80004d8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 800057c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800057e:	f7ff fe27 	bl	80001d0 <HAL_GetTick>
 8000582:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000584:	6823      	ldr	r3, [r4, #0]
 8000586:	0798      	lsls	r0, r3, #30
 8000588:	f57f af6d 	bpl.w	8000466 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800058c:	f7ff fe20 	bl	80001d0 <HAL_GetTick>
 8000590:	1b80      	subs	r0, r0, r6
 8000592:	2802      	cmp	r0, #2
 8000594:	d9f6      	bls.n	8000584 <HAL_RCC_OscConfig+0x130>
 8000596:	e79f      	b.n	80004d8 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000598:	69aa      	ldr	r2, [r5, #24]
 800059a:	4c4a      	ldr	r4, [pc, #296]	; (80006c4 <HAL_RCC_OscConfig+0x270>)
 800059c:	4b4b      	ldr	r3, [pc, #300]	; (80006cc <HAL_RCC_OscConfig+0x278>)
 800059e:	b1da      	cbz	r2, 80005d8 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80005a0:	2201      	movs	r2, #1
 80005a2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005a4:	f7ff fe14 	bl	80001d0 <HAL_GetTick>
 80005a8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005ac:	079b      	lsls	r3, r3, #30
 80005ae:	d50d      	bpl.n	80005cc <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80005b0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80005b4:	4b46      	ldr	r3, [pc, #280]	; (80006d0 <HAL_RCC_OscConfig+0x27c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80005bc:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80005be:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80005c0:	9b01      	ldr	r3, [sp, #4]
 80005c2:	1e5a      	subs	r2, r3, #1
 80005c4:	9201      	str	r2, [sp, #4]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1f9      	bne.n	80005be <HAL_RCC_OscConfig+0x16a>
 80005ca:	e750      	b.n	800046e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80005cc:	f7ff fe00 	bl	80001d0 <HAL_GetTick>
 80005d0:	1b80      	subs	r0, r0, r6
 80005d2:	2802      	cmp	r0, #2
 80005d4:	d9e9      	bls.n	80005aa <HAL_RCC_OscConfig+0x156>
 80005d6:	e77f      	b.n	80004d8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80005d8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005da:	f7ff fdf9 	bl	80001d0 <HAL_GetTick>
 80005de:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80005e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005e2:	079f      	lsls	r7, r3, #30
 80005e4:	f57f af43 	bpl.w	800046e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80005e8:	f7ff fdf2 	bl	80001d0 <HAL_GetTick>
 80005ec:	1b80      	subs	r0, r0, r6
 80005ee:	2802      	cmp	r0, #2
 80005f0:	d9f6      	bls.n	80005e0 <HAL_RCC_OscConfig+0x18c>
 80005f2:	e771      	b.n	80004d8 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80005f4:	4c33      	ldr	r4, [pc, #204]	; (80006c4 <HAL_RCC_OscConfig+0x270>)
 80005f6:	69e3      	ldr	r3, [r4, #28]
 80005f8:	00d8      	lsls	r0, r3, #3
 80005fa:	d424      	bmi.n	8000646 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80005fc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80005fe:	69e3      	ldr	r3, [r4, #28]
 8000600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000604:	61e3      	str	r3, [r4, #28]
 8000606:	69e3      	ldr	r3, [r4, #28]
 8000608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000610:	4e30      	ldr	r6, [pc, #192]	; (80006d4 <HAL_RCC_OscConfig+0x280>)
 8000612:	6833      	ldr	r3, [r6, #0]
 8000614:	05d9      	lsls	r1, r3, #23
 8000616:	d518      	bpl.n	800064a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000618:	68eb      	ldr	r3, [r5, #12]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d126      	bne.n	800066c <HAL_RCC_OscConfig+0x218>
 800061e:	6a23      	ldr	r3, [r4, #32]
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000626:	f7ff fdd3 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800062a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800062e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000630:	6a23      	ldr	r3, [r4, #32]
 8000632:	079b      	lsls	r3, r3, #30
 8000634:	d53f      	bpl.n	80006b6 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000636:	2f00      	cmp	r7, #0
 8000638:	f43f af1d 	beq.w	8000476 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800063c:	69e3      	ldr	r3, [r4, #28]
 800063e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000642:	61e3      	str	r3, [r4, #28]
 8000644:	e717      	b.n	8000476 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000646:	2700      	movs	r7, #0
 8000648:	e7e2      	b.n	8000610 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800064a:	6833      	ldr	r3, [r6, #0]
 800064c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000650:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000652:	f7ff fdbd 	bl	80001d0 <HAL_GetTick>
 8000656:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000658:	6833      	ldr	r3, [r6, #0]
 800065a:	05da      	lsls	r2, r3, #23
 800065c:	d4dc      	bmi.n	8000618 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800065e:	f7ff fdb7 	bl	80001d0 <HAL_GetTick>
 8000662:	eba0 0008 	sub.w	r0, r0, r8
 8000666:	2864      	cmp	r0, #100	; 0x64
 8000668:	d9f6      	bls.n	8000658 <HAL_RCC_OscConfig+0x204>
 800066a:	e735      	b.n	80004d8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800066c:	b9ab      	cbnz	r3, 800069a <HAL_RCC_OscConfig+0x246>
 800066e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000670:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000674:	f023 0301 	bic.w	r3, r3, #1
 8000678:	6223      	str	r3, [r4, #32]
 800067a:	6a23      	ldr	r3, [r4, #32]
 800067c:	f023 0304 	bic.w	r3, r3, #4
 8000680:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000682:	f7ff fda5 	bl	80001d0 <HAL_GetTick>
 8000686:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000688:	6a23      	ldr	r3, [r4, #32]
 800068a:	0798      	lsls	r0, r3, #30
 800068c:	d5d3      	bpl.n	8000636 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800068e:	f7ff fd9f 	bl	80001d0 <HAL_GetTick>
 8000692:	1b80      	subs	r0, r0, r6
 8000694:	4540      	cmp	r0, r8
 8000696:	d9f7      	bls.n	8000688 <HAL_RCC_OscConfig+0x234>
 8000698:	e71e      	b.n	80004d8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800069a:	2b05      	cmp	r3, #5
 800069c:	6a23      	ldr	r3, [r4, #32]
 800069e:	d103      	bne.n	80006a8 <HAL_RCC_OscConfig+0x254>
 80006a0:	f043 0304 	orr.w	r3, r3, #4
 80006a4:	6223      	str	r3, [r4, #32]
 80006a6:	e7ba      	b.n	800061e <HAL_RCC_OscConfig+0x1ca>
 80006a8:	f023 0301 	bic.w	r3, r3, #1
 80006ac:	6223      	str	r3, [r4, #32]
 80006ae:	6a23      	ldr	r3, [r4, #32]
 80006b0:	f023 0304 	bic.w	r3, r3, #4
 80006b4:	e7b6      	b.n	8000624 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006b6:	f7ff fd8b 	bl	80001d0 <HAL_GetTick>
 80006ba:	eba0 0008 	sub.w	r0, r0, r8
 80006be:	42b0      	cmp	r0, r6
 80006c0:	d9b6      	bls.n	8000630 <HAL_RCC_OscConfig+0x1dc>
 80006c2:	e709      	b.n	80004d8 <HAL_RCC_OscConfig+0x84>
 80006c4:	40021000 	.word	0x40021000
 80006c8:	42420000 	.word	0x42420000
 80006cc:	42420480 	.word	0x42420480
 80006d0:	20000008 	.word	0x20000008
 80006d4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80006d8:	4c22      	ldr	r4, [pc, #136]	; (8000764 <HAL_RCC_OscConfig+0x310>)
 80006da:	6863      	ldr	r3, [r4, #4]
 80006dc:	f003 030c 	and.w	r3, r3, #12
 80006e0:	2b08      	cmp	r3, #8
 80006e2:	f43f aee2 	beq.w	80004aa <HAL_RCC_OscConfig+0x56>
 80006e6:	2300      	movs	r3, #0
 80006e8:	4e1f      	ldr	r6, [pc, #124]	; (8000768 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80006ea:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80006ec:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80006ee:	d12b      	bne.n	8000748 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80006f0:	f7ff fd6e 	bl	80001d0 <HAL_GetTick>
 80006f4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80006f6:	6823      	ldr	r3, [r4, #0]
 80006f8:	0199      	lsls	r1, r3, #6
 80006fa:	d41f      	bmi.n	800073c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80006fc:	6a2b      	ldr	r3, [r5, #32]
 80006fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000702:	d105      	bne.n	8000710 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000704:	6862      	ldr	r2, [r4, #4]
 8000706:	68a9      	ldr	r1, [r5, #8]
 8000708:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800070c:	430a      	orrs	r2, r1
 800070e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000710:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000712:	6862      	ldr	r2, [r4, #4]
 8000714:	430b      	orrs	r3, r1
 8000716:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800071a:	4313      	orrs	r3, r2
 800071c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800071e:	2301      	movs	r3, #1
 8000720:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000722:	f7ff fd55 	bl	80001d0 <HAL_GetTick>
 8000726:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000728:	6823      	ldr	r3, [r4, #0]
 800072a:	019a      	lsls	r2, r3, #6
 800072c:	f53f aea7 	bmi.w	800047e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000730:	f7ff fd4e 	bl	80001d0 <HAL_GetTick>
 8000734:	1b40      	subs	r0, r0, r5
 8000736:	2802      	cmp	r0, #2
 8000738:	d9f6      	bls.n	8000728 <HAL_RCC_OscConfig+0x2d4>
 800073a:	e6cd      	b.n	80004d8 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800073c:	f7ff fd48 	bl	80001d0 <HAL_GetTick>
 8000740:	1bc0      	subs	r0, r0, r7
 8000742:	2802      	cmp	r0, #2
 8000744:	d9d7      	bls.n	80006f6 <HAL_RCC_OscConfig+0x2a2>
 8000746:	e6c7      	b.n	80004d8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000748:	f7ff fd42 	bl	80001d0 <HAL_GetTick>
 800074c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800074e:	6823      	ldr	r3, [r4, #0]
 8000750:	019b      	lsls	r3, r3, #6
 8000752:	f57f ae94 	bpl.w	800047e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000756:	f7ff fd3b 	bl	80001d0 <HAL_GetTick>
 800075a:	1b40      	subs	r0, r0, r5
 800075c:	2802      	cmp	r0, #2
 800075e:	d9f6      	bls.n	800074e <HAL_RCC_OscConfig+0x2fa>
 8000760:	e6ba      	b.n	80004d8 <HAL_RCC_OscConfig+0x84>
 8000762:	bf00      	nop
 8000764:	40021000 	.word	0x40021000
 8000768:	42420060 	.word	0x42420060

0800076c <HAL_RCC_GetSysClockFreq>:
{
 800076c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000770:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000772:	ac02      	add	r4, sp, #8
 8000774:	f103 0510 	add.w	r5, r3, #16
 8000778:	4622      	mov	r2, r4
 800077a:	6818      	ldr	r0, [r3, #0]
 800077c:	6859      	ldr	r1, [r3, #4]
 800077e:	3308      	adds	r3, #8
 8000780:	c203      	stmia	r2!, {r0, r1}
 8000782:	42ab      	cmp	r3, r5
 8000784:	4614      	mov	r4, r2
 8000786:	d1f7      	bne.n	8000778 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000788:	2301      	movs	r3, #1
 800078a:	f88d 3004 	strb.w	r3, [sp, #4]
 800078e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000790:	4911      	ldr	r1, [pc, #68]	; (80007d8 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000792:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000796:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000798:	f003 020c 	and.w	r2, r3, #12
 800079c:	2a08      	cmp	r2, #8
 800079e:	d117      	bne.n	80007d0 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007a0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80007a4:	a806      	add	r0, sp, #24
 80007a6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007a8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007aa:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007ae:	d50c      	bpl.n	80007ca <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007b0:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007b2:	480a      	ldr	r0, [pc, #40]	; (80007dc <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007b4:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007b8:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007ba:	aa06      	add	r2, sp, #24
 80007bc:	4413      	add	r3, r2
 80007be:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80007c2:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80007c6:	b007      	add	sp, #28
 80007c8:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <HAL_RCC_GetSysClockFreq+0x74>)
 80007cc:	4350      	muls	r0, r2
 80007ce:	e7fa      	b.n	80007c6 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80007d0:	4802      	ldr	r0, [pc, #8]	; (80007dc <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80007d2:	e7f8      	b.n	80007c6 <HAL_RCC_GetSysClockFreq+0x5a>
 80007d4:	080011d8 	.word	0x080011d8
 80007d8:	40021000 	.word	0x40021000
 80007dc:	007a1200 	.word	0x007a1200
 80007e0:	003d0900 	.word	0x003d0900

080007e4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80007e4:	4a54      	ldr	r2, [pc, #336]	; (8000938 <HAL_RCC_ClockConfig+0x154>)
{
 80007e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80007ea:	6813      	ldr	r3, [r2, #0]
{
 80007ec:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	428b      	cmp	r3, r1
{
 80007f4:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80007f6:	d32a      	bcc.n	800084e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80007f8:	6829      	ldr	r1, [r5, #0]
 80007fa:	078c      	lsls	r4, r1, #30
 80007fc:	d434      	bmi.n	8000868 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80007fe:	07ca      	lsls	r2, r1, #31
 8000800:	d447      	bmi.n	8000892 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000802:	4a4d      	ldr	r2, [pc, #308]	; (8000938 <HAL_RCC_ClockConfig+0x154>)
 8000804:	6813      	ldr	r3, [r2, #0]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	429e      	cmp	r6, r3
 800080c:	f0c0 8082 	bcc.w	8000914 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000810:	682a      	ldr	r2, [r5, #0]
 8000812:	4c4a      	ldr	r4, [pc, #296]	; (800093c <HAL_RCC_ClockConfig+0x158>)
 8000814:	f012 0f04 	tst.w	r2, #4
 8000818:	f040 8087 	bne.w	800092a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800081c:	0713      	lsls	r3, r2, #28
 800081e:	d506      	bpl.n	800082e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000820:	6863      	ldr	r3, [r4, #4]
 8000822:	692a      	ldr	r2, [r5, #16]
 8000824:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000828:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800082c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800082e:	f7ff ff9d 	bl	800076c <HAL_RCC_GetSysClockFreq>
 8000832:	6863      	ldr	r3, [r4, #4]
 8000834:	4a42      	ldr	r2, [pc, #264]	; (8000940 <HAL_RCC_ClockConfig+0x15c>)
 8000836:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800083a:	5cd3      	ldrb	r3, [r2, r3]
 800083c:	40d8      	lsrs	r0, r3
 800083e:	4b41      	ldr	r3, [pc, #260]	; (8000944 <HAL_RCC_ClockConfig+0x160>)
 8000840:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000842:	2000      	movs	r0, #0
 8000844:	f7ff fc82 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000848:	2000      	movs	r0, #0
}
 800084a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800084e:	6813      	ldr	r3, [r2, #0]
 8000850:	f023 0307 	bic.w	r3, r3, #7
 8000854:	430b      	orrs	r3, r1
 8000856:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000858:	6813      	ldr	r3, [r2, #0]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	4299      	cmp	r1, r3
 8000860:	d0ca      	beq.n	80007f8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000862:	2001      	movs	r0, #1
 8000864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000868:	4b34      	ldr	r3, [pc, #208]	; (800093c <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800086a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800086e:	bf1e      	ittt	ne
 8000870:	685a      	ldrne	r2, [r3, #4]
 8000872:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000876:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000878:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800087a:	bf42      	ittt	mi
 800087c:	685a      	ldrmi	r2, [r3, #4]
 800087e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000882:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000884:	685a      	ldr	r2, [r3, #4]
 8000886:	68a8      	ldr	r0, [r5, #8]
 8000888:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800088c:	4302      	orrs	r2, r0
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	e7b5      	b.n	80007fe <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000892:	686a      	ldr	r2, [r5, #4]
 8000894:	4c29      	ldr	r4, [pc, #164]	; (800093c <HAL_RCC_ClockConfig+0x158>)
 8000896:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000898:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800089a:	d11c      	bne.n	80008d6 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800089c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008a0:	d0df      	beq.n	8000862 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008a2:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008a4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008a8:	f023 0303 	bic.w	r3, r3, #3
 80008ac:	4313      	orrs	r3, r2
 80008ae:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80008b0:	f7ff fc8e 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008b4:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80008b6:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d114      	bne.n	80008e6 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80008bc:	6863      	ldr	r3, [r4, #4]
 80008be:	f003 030c 	and.w	r3, r3, #12
 80008c2:	2b04      	cmp	r3, #4
 80008c4:	d09d      	beq.n	8000802 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008c6:	f7ff fc83 	bl	80001d0 <HAL_GetTick>
 80008ca:	1bc0      	subs	r0, r0, r7
 80008cc:	4540      	cmp	r0, r8
 80008ce:	d9f5      	bls.n	80008bc <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80008d0:	2003      	movs	r0, #3
 80008d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80008d6:	2a02      	cmp	r2, #2
 80008d8:	d102      	bne.n	80008e0 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80008da:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80008de:	e7df      	b.n	80008a0 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008e0:	f013 0f02 	tst.w	r3, #2
 80008e4:	e7dc      	b.n	80008a0 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d10f      	bne.n	800090a <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008ea:	6863      	ldr	r3, [r4, #4]
 80008ec:	f003 030c 	and.w	r3, r3, #12
 80008f0:	2b08      	cmp	r3, #8
 80008f2:	d086      	beq.n	8000802 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008f4:	f7ff fc6c 	bl	80001d0 <HAL_GetTick>
 80008f8:	1bc0      	subs	r0, r0, r7
 80008fa:	4540      	cmp	r0, r8
 80008fc:	d9f5      	bls.n	80008ea <HAL_RCC_ClockConfig+0x106>
 80008fe:	e7e7      	b.n	80008d0 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000900:	f7ff fc66 	bl	80001d0 <HAL_GetTick>
 8000904:	1bc0      	subs	r0, r0, r7
 8000906:	4540      	cmp	r0, r8
 8000908:	d8e2      	bhi.n	80008d0 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800090a:	6863      	ldr	r3, [r4, #4]
 800090c:	f013 0f0c 	tst.w	r3, #12
 8000910:	d1f6      	bne.n	8000900 <HAL_RCC_ClockConfig+0x11c>
 8000912:	e776      	b.n	8000802 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000914:	6813      	ldr	r3, [r2, #0]
 8000916:	f023 0307 	bic.w	r3, r3, #7
 800091a:	4333      	orrs	r3, r6
 800091c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800091e:	6813      	ldr	r3, [r2, #0]
 8000920:	f003 0307 	and.w	r3, r3, #7
 8000924:	429e      	cmp	r6, r3
 8000926:	d19c      	bne.n	8000862 <HAL_RCC_ClockConfig+0x7e>
 8000928:	e772      	b.n	8000810 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800092a:	6863      	ldr	r3, [r4, #4]
 800092c:	68e9      	ldr	r1, [r5, #12]
 800092e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000932:	430b      	orrs	r3, r1
 8000934:	6063      	str	r3, [r4, #4]
 8000936:	e771      	b.n	800081c <HAL_RCC_ClockConfig+0x38>
 8000938:	40022000 	.word	0x40022000
 800093c:	40021000 	.word	0x40021000
 8000940:	080011e8 	.word	0x080011e8
 8000944:	20000008 	.word	0x20000008

08000948 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000948:	6a03      	ldr	r3, [r0, #32]
{
 800094a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800094c:	f023 0301 	bic.w	r3, r3, #1
 8000950:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000952:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000954:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000956:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000958:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800095a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800095e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000960:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000962:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000966:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000968:	4d0a      	ldr	r5, [pc, #40]	; (8000994 <TIM_OC1_SetConfig+0x4c>)
 800096a:	42a8      	cmp	r0, r5
 800096c:	d10b      	bne.n	8000986 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800096e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000970:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000974:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000976:	698e      	ldr	r6, [r1, #24]
 8000978:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800097a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800097e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000980:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000984:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000986:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000988:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800098a:	684a      	ldr	r2, [r1, #4]
 800098c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800098e:	6203      	str	r3, [r0, #32]
 8000990:	bd70      	pop	{r4, r5, r6, pc}
 8000992:	bf00      	nop
 8000994:	40012c00 	.word	0x40012c00

08000998 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000998:	6a03      	ldr	r3, [r0, #32]
{
 800099a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800099c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009a0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80009a2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80009a4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80009a6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80009a8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80009aa:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80009ae:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80009b0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80009b2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80009b6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80009ba:	4d0b      	ldr	r5, [pc, #44]	; (80009e8 <TIM_OC3_SetConfig+0x50>)
 80009bc:	42a8      	cmp	r0, r5
 80009be:	d10d      	bne.n	80009dc <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80009c0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80009c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80009c6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80009ca:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80009cc:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80009ce:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80009d2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80009d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80009d8:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80009dc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80009de:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80009e0:	684a      	ldr	r2, [r1, #4]
 80009e2:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80009e4:	6203      	str	r3, [r0, #32]
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	40012c00 	.word	0x40012c00

080009ec <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80009ec:	6a03      	ldr	r3, [r0, #32]
{
 80009ee:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80009f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009f4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80009f6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80009f8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80009fa:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80009fc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80009fe:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000a02:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000a06:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000a08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000a0c:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000a10:	4d06      	ldr	r5, [pc, #24]	; (8000a2c <TIM_OC4_SetConfig+0x40>)
 8000a12:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000a14:	bf02      	ittt	eq
 8000a16:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000a18:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000a1c:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000a20:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000a22:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000a24:	684a      	ldr	r2, [r1, #4]
 8000a26:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000a28:	6203      	str	r3, [r0, #32]
 8000a2a:	bd30      	pop	{r4, r5, pc}
 8000a2c:	40012c00 	.word	0x40012c00

08000a30 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000a30:	6803      	ldr	r3, [r0, #0]
}
 8000a32:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000a34:	68da      	ldr	r2, [r3, #12]
 8000a36:	f042 0201 	orr.w	r2, r2, #1
 8000a3a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	f042 0201 	orr.w	r2, r2, #1
 8000a42:	601a      	str	r2, [r3, #0]
}
 8000a44:	4770      	bx	lr

08000a46 <HAL_TIM_PWM_MspInit>:
 8000a46:	4770      	bx	lr

08000a48 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000a48:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000a4c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	f04f 0302 	mov.w	r3, #2
 8000a54:	d01c      	beq.n	8000a90 <HAL_TIM_ConfigClockSource+0x48>
 8000a56:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000a58:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8000a5c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000a5e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8000a62:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000a64:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000a68:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000a6c:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8000a6e:	680a      	ldr	r2, [r1, #0]
 8000a70:	2a40      	cmp	r2, #64	; 0x40
 8000a72:	d079      	beq.n	8000b68 <HAL_TIM_ConfigClockSource+0x120>
 8000a74:	d819      	bhi.n	8000aaa <HAL_TIM_ConfigClockSource+0x62>
 8000a76:	2a10      	cmp	r2, #16
 8000a78:	f000 8093 	beq.w	8000ba2 <HAL_TIM_ConfigClockSource+0x15a>
 8000a7c:	d80a      	bhi.n	8000a94 <HAL_TIM_ConfigClockSource+0x4c>
 8000a7e:	2a00      	cmp	r2, #0
 8000a80:	f000 8089 	beq.w	8000b96 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8000a84:	2301      	movs	r3, #1
 8000a86:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000a90:	4618      	mov	r0, r3
}
 8000a92:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000a94:	2a20      	cmp	r2, #32
 8000a96:	f000 808a 	beq.w	8000bae <HAL_TIM_ConfigClockSource+0x166>
 8000a9a:	2a30      	cmp	r2, #48	; 0x30
 8000a9c:	d1f2      	bne.n	8000a84 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000a9e:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000aa0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000aa4:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000aa8:	e036      	b.n	8000b18 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000aaa:	2a70      	cmp	r2, #112	; 0x70
 8000aac:	d036      	beq.n	8000b1c <HAL_TIM_ConfigClockSource+0xd4>
 8000aae:	d81b      	bhi.n	8000ae8 <HAL_TIM_ConfigClockSource+0xa0>
 8000ab0:	2a50      	cmp	r2, #80	; 0x50
 8000ab2:	d042      	beq.n	8000b3a <HAL_TIM_ConfigClockSource+0xf2>
 8000ab4:	2a60      	cmp	r2, #96	; 0x60
 8000ab6:	d1e5      	bne.n	8000a84 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ab8:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000aba:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000abc:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000ac0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ac2:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000ac4:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000ac6:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000ac8:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000acc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000ad0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000ad4:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000ad8:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000ada:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000adc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ade:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ae2:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000ae6:	e017      	b.n	8000b18 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000ae8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000aec:	d011      	beq.n	8000b12 <HAL_TIM_ConfigClockSource+0xca>
 8000aee:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000af2:	d1c7      	bne.n	8000a84 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000af4:	688a      	ldr	r2, [r1, #8]
 8000af6:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000af8:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000afa:	68c9      	ldr	r1, [r1, #12]
 8000afc:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000afe:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000b02:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000b06:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000b08:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000b0a:	689a      	ldr	r2, [r3, #8]
 8000b0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b10:	e002      	b.n	8000b18 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000b12:	689a      	ldr	r2, [r3, #8]
 8000b14:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	e7b3      	b.n	8000a84 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000b1c:	688a      	ldr	r2, [r1, #8]
 8000b1e:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000b20:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000b22:	68c9      	ldr	r1, [r1, #12]
 8000b24:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000b26:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000b2a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000b2e:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000b30:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000b32:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000b34:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000b38:	e7ee      	b.n	8000b18 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000b3a:	684c      	ldr	r4, [r1, #4]
 8000b3c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000b3e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b40:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000b42:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b46:	f025 0501 	bic.w	r5, r5, #1
 8000b4a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000b4c:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000b4e:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000b50:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000b54:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000b58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000b5a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000b5c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b62:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000b66:	e7d7      	b.n	8000b18 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000b68:	684c      	ldr	r4, [r1, #4]
 8000b6a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000b6c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b6e:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000b70:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b74:	f025 0501 	bic.w	r5, r5, #1
 8000b78:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000b7a:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000b7c:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000b7e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000b82:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000b88:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000b8a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b8c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b90:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000b94:	e7c0      	b.n	8000b18 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000b96:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000b98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000b9c:	f042 0207 	orr.w	r2, r2, #7
 8000ba0:	e7ba      	b.n	8000b18 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000ba2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ba4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ba8:	f042 0217 	orr.w	r2, r2, #23
 8000bac:	e7b4      	b.n	8000b18 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000bae:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000bb0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000bb4:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000bb8:	e7ae      	b.n	8000b18 <HAL_TIM_ConfigClockSource+0xd0>
	...

08000bbc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000bbc:	4a1a      	ldr	r2, [pc, #104]	; (8000c28 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8000bbe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000bc0:	4290      	cmp	r0, r2
 8000bc2:	d00a      	beq.n	8000bda <TIM_Base_SetConfig+0x1e>
 8000bc4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000bc8:	d007      	beq.n	8000bda <TIM_Base_SetConfig+0x1e>
 8000bca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000bce:	4290      	cmp	r0, r2
 8000bd0:	d003      	beq.n	8000bda <TIM_Base_SetConfig+0x1e>
 8000bd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bd6:	4290      	cmp	r0, r2
 8000bd8:	d115      	bne.n	8000c06 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8000bda:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000be0:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000be2:	4a11      	ldr	r2, [pc, #68]	; (8000c28 <TIM_Base_SetConfig+0x6c>)
 8000be4:	4290      	cmp	r0, r2
 8000be6:	d00a      	beq.n	8000bfe <TIM_Base_SetConfig+0x42>
 8000be8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000bec:	d007      	beq.n	8000bfe <TIM_Base_SetConfig+0x42>
 8000bee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000bf2:	4290      	cmp	r0, r2
 8000bf4:	d003      	beq.n	8000bfe <TIM_Base_SetConfig+0x42>
 8000bf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000bfa:	4290      	cmp	r0, r2
 8000bfc:	d103      	bne.n	8000c06 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000bfe:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000c04:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000c06:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000c0c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000c0e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000c10:	688b      	ldr	r3, [r1, #8]
 8000c12:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000c14:	680b      	ldr	r3, [r1, #0]
 8000c16:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <TIM_Base_SetConfig+0x6c>)
 8000c1a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8000c1c:	bf04      	itt	eq
 8000c1e:	690b      	ldreq	r3, [r1, #16]
 8000c20:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000c22:	2301      	movs	r3, #1
 8000c24:	6143      	str	r3, [r0, #20]
 8000c26:	4770      	bx	lr
 8000c28:	40012c00 	.word	0x40012c00

08000c2c <HAL_TIM_Base_Init>:
{
 8000c2c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000c2e:	4604      	mov	r4, r0
 8000c30:	b1a0      	cbz	r0, 8000c5c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000c32:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000c36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c3a:	b91b      	cbnz	r3, 8000c44 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000c3c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000c40:	f000 f9f6 	bl	8001030 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000c44:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c46:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000c48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c4c:	1d21      	adds	r1, r4, #4
 8000c4e:	f7ff ffb5 	bl	8000bbc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000c52:	2301      	movs	r3, #1
  return HAL_OK;
 8000c54:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000c56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000c5a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c5c:	2001      	movs	r0, #1
}
 8000c5e:	bd10      	pop	{r4, pc}

08000c60 <HAL_TIM_PWM_Init>:
{
 8000c60:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000c62:	4604      	mov	r4, r0
 8000c64:	b1a0      	cbz	r0, 8000c90 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000c66:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000c6a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c6e:	b91b      	cbnz	r3, 8000c78 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000c70:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8000c74:	f7ff fee7 	bl	8000a46 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000c78:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c7a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000c7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000c80:	1d21      	adds	r1, r4, #4
 8000c82:	f7ff ff9b 	bl	8000bbc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000c86:	2301      	movs	r3, #1
  return HAL_OK;
 8000c88:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000c8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000c8e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c90:	2001      	movs	r0, #1
}
 8000c92:	bd10      	pop	{r4, pc}

08000c94 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000c94:	6a03      	ldr	r3, [r0, #32]
{
 8000c96:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000c98:	f023 0310 	bic.w	r3, r3, #16
 8000c9c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8000c9e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8000ca0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8000ca2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000ca4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000ca6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000caa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000cae:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8000cb0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000cb4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8000cb8:	4d0b      	ldr	r5, [pc, #44]	; (8000ce8 <TIM_OC2_SetConfig+0x54>)
 8000cba:	42a8      	cmp	r0, r5
 8000cbc:	d10d      	bne.n	8000cda <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000cbe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8000cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000cc4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8000cc8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8000cca:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8000ccc:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8000cd0:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8000cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8000cd6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8000cda:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000cdc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8000cde:	684a      	ldr	r2, [r1, #4]
 8000ce0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8000ce2:	6203      	str	r3, [r0, #32]
 8000ce4:	bd70      	pop	{r4, r5, r6, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40012c00 	.word	0x40012c00

08000cec <HAL_TIM_PWM_ConfigChannel>:
{
 8000cec:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8000cee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000cf2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	f04f 0002 	mov.w	r0, #2
 8000cfa:	d025      	beq.n	8000d48 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8000cfc:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8000cfe:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8000d02:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8000d06:	2a0c      	cmp	r2, #12
 8000d08:	d818      	bhi.n	8000d3c <HAL_TIM_PWM_ConfigChannel+0x50>
 8000d0a:	e8df f002 	tbb	[pc, r2]
 8000d0e:	1707      	.short	0x1707
 8000d10:	171e1717 	.word	0x171e1717
 8000d14:	172f1717 	.word	0x172f1717
 8000d18:	1717      	.short	0x1717
 8000d1a:	40          	.byte	0x40
 8000d1b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8000d1c:	6820      	ldr	r0, [r4, #0]
 8000d1e:	f7ff fe13 	bl	8000948 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000d22:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000d24:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000d26:	699a      	ldr	r2, [r3, #24]
 8000d28:	f042 0208 	orr.w	r2, r2, #8
 8000d2c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8000d2e:	699a      	ldr	r2, [r3, #24]
 8000d30:	f022 0204 	bic.w	r2, r2, #4
 8000d34:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000d36:	699a      	ldr	r2, [r3, #24]
 8000d38:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8000d3a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8000d3c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000d3e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000d40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000d44:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8000d48:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8000d4a:	6820      	ldr	r0, [r4, #0]
 8000d4c:	f7ff ffa2 	bl	8000c94 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000d50:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8000d52:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000d54:	699a      	ldr	r2, [r3, #24]
 8000d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8000d5c:	699a      	ldr	r2, [r3, #24]
 8000d5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8000d64:	699a      	ldr	r2, [r3, #24]
 8000d66:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d6a:	e7e6      	b.n	8000d3a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8000d6c:	6820      	ldr	r0, [r4, #0]
 8000d6e:	f7ff fe13 	bl	8000998 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000d72:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000d74:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000d76:	69da      	ldr	r2, [r3, #28]
 8000d78:	f042 0208 	orr.w	r2, r2, #8
 8000d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8000d7e:	69da      	ldr	r2, [r3, #28]
 8000d80:	f022 0204 	bic.w	r2, r2, #4
 8000d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000d86:	69da      	ldr	r2, [r3, #28]
 8000d88:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8000d8a:	61da      	str	r2, [r3, #28]
    break;
 8000d8c:	e7d6      	b.n	8000d3c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8000d8e:	6820      	ldr	r0, [r4, #0]
 8000d90:	f7ff fe2c 	bl	80009ec <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000d94:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8000d96:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000d98:	69da      	ldr	r2, [r3, #28]
 8000d9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000d9e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8000da0:	69da      	ldr	r2, [r3, #28]
 8000da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000da6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8000da8:	69da      	ldr	r2, [r3, #28]
 8000daa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000dae:	e7ec      	b.n	8000d8a <HAL_TIM_PWM_ConfigChannel+0x9e>

08000db0 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8000db0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8000db2:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8000db4:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8000db6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8000db8:	ea23 0304 	bic.w	r3, r3, r4
 8000dbc:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8000dbe:	6a03      	ldr	r3, [r0, #32]
 8000dc0:	408a      	lsls	r2, r1
 8000dc2:	431a      	orrs	r2, r3
 8000dc4:	6202      	str	r2, [r0, #32]
 8000dc6:	bd10      	pop	{r4, pc}

08000dc8 <HAL_TIM_PWM_Start>:
{
 8000dc8:	b510      	push	{r4, lr}
 8000dca:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	6800      	ldr	r0, [r0, #0]
 8000dd0:	f7ff ffee 	bl	8000db0 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8000dd4:	6823      	ldr	r3, [r4, #0]
 8000dd6:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <HAL_TIM_PWM_Start+0x28>)
}
 8000dd8:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8000dda:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8000ddc:	bf02      	ittt	eq
 8000dde:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8000de0:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8000de4:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	f042 0201 	orr.w	r2, r2, #1
 8000dec:	601a      	str	r2, [r3, #0]
}
 8000dee:	bd10      	pop	{r4, pc}
 8000df0:	40012c00 	.word	0x40012c00

08000df4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState : specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8000df4:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  tmp = TIM_CCER_CC1NE << Channel;
 8000df6:	2404      	movs	r4, #4

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8000df8:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1NE << Channel;
 8000dfa:	408c      	lsls	r4, r1
  TIMx->CCER &=  ~tmp;
 8000dfc:	ea23 0304 	bic.w	r3, r3, r4
 8000e00:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 8000e02:	6a03      	ldr	r3, [r0, #32]
 8000e04:	408a      	lsls	r2, r1
 8000e06:	431a      	orrs	r2, r3
 8000e08:	6202      	str	r2, [r0, #32]
 8000e0a:	bd10      	pop	{r4, pc}

08000e0c <HAL_TIMEx_PWMN_Start>:
{
 8000e0c:	b510      	push	{r4, lr}
 8000e0e:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8000e10:	2204      	movs	r2, #4
 8000e12:	6800      	ldr	r0, [r0, #0]
 8000e14:	f7ff ffee 	bl	8000df4 <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8000e18:	6823      	ldr	r3, [r4, #0]
}
 8000e1a:	2000      	movs	r0, #0
  __HAL_TIM_MOE_ENABLE(htim);
 8000e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e22:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	f042 0201 	orr.w	r2, r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]
}
 8000e2c:	bd10      	pop	{r4, pc}

08000e2e <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8000e2e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d01f      	beq.n	8000e76 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8000e36:	68cb      	ldr	r3, [r1, #12]
 8000e38:	688a      	ldr	r2, [r1, #8]
 8000e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e3e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8000e40:	684a      	ldr	r2, [r1, #4]
 8000e42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e46:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8000e48:	680a      	ldr	r2, [r1, #0]
 8000e4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e4e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8000e50:	690a      	ldr	r2, [r1, #16]
 8000e52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e56:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8000e58:	694a      	ldr	r2, [r1, #20]
 8000e5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e5e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8000e60:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8000e62:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e66:	4313      	orrs	r3, r2
  htim->Instance->BDTR = tmpbdtr;
 8000e68:	6802      	ldr	r2, [r0, #0]
 8000e6a:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000e72:	4618      	mov	r0, r3
 8000e74:	4770      	bx	lr
  __HAL_LOCK(htim);
 8000e76:	2002      	movs	r0, #2
}
 8000e78:	4770      	bx	lr

08000e7a <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8000e7a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000e7e:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	f04f 0302 	mov.w	r3, #2
 8000e86:	d018      	beq.n	8000eba <HAL_TIMEx_MasterConfigSynchronization+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8000e88:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000e8c:	6803      	ldr	r3, [r0, #0]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000e8e:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000e90:	685a      	ldr	r2, [r3, #4]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000e92:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000e94:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000e98:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	4322      	orrs	r2, r4
 8000e9e:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ea6:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000ea8:	689a      	ldr	r2, [r3, #8]
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000eba:	4618      	mov	r0, r3
}
 8000ebc:	bd10      	pop	{r4, pc}

08000ebe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ebe:	b500      	push	{lr}
 8000ec0:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec2:	2228      	movs	r2, #40	; 0x28
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	a806      	add	r0, sp, #24
 8000ec8:	f000 f972 	bl	80011b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ecc:	2214      	movs	r2, #20
 8000ece:	2100      	movs	r1, #0
 8000ed0:	a801      	add	r0, sp, #4
 8000ed2:	f000 f96d 	bl	80011b0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eda:	2301      	movs	r3, #1
 8000edc:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ede:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee0:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee2:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee4:	f7ff fab6 	bl	8000454 <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ee8:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eea:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eec:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eee:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ef0:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef2:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ef4:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ef6:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ef8:	f7ff fc74 	bl	80007e4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000efc:	b011      	add	sp, #68	; 0x44
 8000efe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000f04 <main>:
{
 8000f04:	b500      	push	{lr}
 8000f06:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 8000f08:	f7ff f944 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8000f0c:	f7ff ffd7 	bl	8000ebe <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	4b33      	ldr	r3, [pc, #204]	; (8000fe0 <main+0xdc>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f12:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	699a      	ldr	r2, [r3, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f16:	2100      	movs	r1, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	f042 0204 	orr.w	r2, r2, #4
 8000f1c:	619a      	str	r2, [r3, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1e:	2210      	movs	r2, #16
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	699b      	ldr	r3, [r3, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f22:	eb0d 0002 	add.w	r0, sp, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	9b01      	ldr	r3, [sp, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	f000 f93f 	bl	80011b0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f32:	221c      	movs	r2, #28
 8000f34:	4621      	mov	r1, r4
 8000f36:	a808      	add	r0, sp, #32
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f38:	9402      	str	r4, [sp, #8]
 8000f3a:	9403      	str	r4, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f3c:	f000 f938 	bl	80011b0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f40:	221c      	movs	r2, #28
 8000f42:	4621      	mov	r1, r4
 8000f44:	a80f      	add	r0, sp, #60	; 0x3c
  htim1.Instance = TIM1;
 8000f46:	4d27      	ldr	r5, [pc, #156]	; (8000fe4 <main+0xe0>)
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f48:	f000 f932 	bl	80011b0 <memset>
  htim1.Instance = TIM1;
 8000f4c:	4b26      	ldr	r3, [pc, #152]	; (8000fe8 <main+0xe4>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f4e:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 0;
 8000f50:	e885 0018 	stmia.w	r5, {r3, r4}
  htim1.Init.Period = 8000;
 8000f54:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f58:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 8000;
 8000f5a:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5c:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f5e:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f60:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f62:	f7ff fe63 	bl	8000c2c <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f6a:	a904      	add	r1, sp, #16
 8000f6c:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6e:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f70:	f7ff fd6a 	bl	8000a48 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f74:	4628      	mov	r0, r5
 8000f76:	f7ff fe73 	bl	8000c60 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f7a:	a902      	add	r1, sp, #8
 8000f7c:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7e:	9402      	str	r4, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f80:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f82:	f7ff ff7a 	bl	8000e7a <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f86:	2360      	movs	r3, #96	; 0x60
 8000f88:	9308      	str	r3, [sp, #32]
  sConfigOC.Pulse = 5000;
 8000f8a:	f241 3388 	movw	r3, #5000	; 0x1388
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f8e:	4622      	mov	r2, r4
 8000f90:	a908      	add	r1, sp, #32
 8000f92:	4628      	mov	r0, r5
  sConfigOC.Pulse = 5000;
 8000f94:	9309      	str	r3, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f96:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f98:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f9a:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f9c:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f9e:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fa0:	f7ff fea4 	bl	8000cec <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa8:	9314      	str	r3, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000faa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fae:	a90f      	add	r1, sp, #60	; 0x3c
 8000fb0:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8000fb2:	9315      	str	r3, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fb4:	940f      	str	r4, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fb6:	9410      	str	r4, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fb8:	9411      	str	r4, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fba:	9412      	str	r4, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fbc:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fbe:	f7ff ff36 	bl	8000e2e <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8000fc2:	4628      	mov	r0, r5
 8000fc4:	f000 f848 	bl	8001058 <HAL_TIM_MspPostInit>
  HAL_TIM_Base_Start_IT(&htim1);
 8000fc8:	4628      	mov	r0, r5
 8000fca:	f7ff fd31 	bl	8000a30 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000fce:	4621      	mov	r1, r4
 8000fd0:	4628      	mov	r0, r5
 8000fd2:	f7ff fef9 	bl	8000dc8 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8000fd6:	4621      	mov	r1, r4
 8000fd8:	4628      	mov	r0, r5
 8000fda:	f7ff ff17 	bl	8000e0c <HAL_TIMEx_PWMN_Start>
 8000fde:	e7fe      	b.n	8000fde <main+0xda>
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	2000002c 	.word	0x2000002c
 8000fe8:	40012c00 	.word	0x40012c00

08000fec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fec:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <HAL_MspInit+0x3c>)
{
 8000fee:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff0:	699a      	ldr	r2, [r3, #24]
 8000ff2:	f042 0201 	orr.w	r2, r2, #1
 8000ff6:	619a      	str	r2, [r3, #24]
 8000ff8:	699a      	ldr	r2, [r3, #24]
 8000ffa:	f002 0201 	and.w	r2, r2, #1
 8000ffe:	9200      	str	r2, [sp, #0]
 8001000:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001002:	69da      	ldr	r2, [r3, #28]
 8001004:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001008:	61da      	str	r2, [r3, #28]
 800100a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800100c:	4a07      	ldr	r2, [pc, #28]	; (800102c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001016:	6853      	ldr	r3, [r2, #4]
 8001018:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800101c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001020:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001022:	b002      	add	sp, #8
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000
 800102c:	40010000 	.word	0x40010000

08001030 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8001030:	6802      	ldr	r2, [r0, #0]
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <HAL_TIM_Base_MspInit+0x24>)
{
 8001034:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8001036:	429a      	cmp	r2, r3
 8001038:	d10a      	bne.n	8001050 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800103a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800103e:	699a      	ldr	r2, [r3, #24]
 8001040:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001044:	619a      	str	r2, [r3, #24]
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001050:	b002      	add	sp, #8
 8001052:	4770      	bx	lr
 8001054:	40012c00 	.word	0x40012c00

08001058 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001058:	b510      	push	{r4, lr}
 800105a:	4604      	mov	r4, r0
 800105c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105e:	2210      	movs	r2, #16
 8001060:	2100      	movs	r1, #0
 8001062:	a802      	add	r0, sp, #8
 8001064:	f000 f8a4 	bl	80011b0 <memset>
  if(htim->Instance==TIM1)
 8001068:	6822      	ldr	r2, [r4, #0]
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <HAL_TIM_MspPostInit+0x58>)
 800106c:	429a      	cmp	r2, r3
 800106e:	d11d      	bne.n	80010ac <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001074:	699a      	ldr	r2, [r3, #24]
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001078:	f042 0204 	orr.w	r2, r2, #4
 800107c:	619a      	str	r2, [r3, #24]
 800107e:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	480c      	ldr	r0, [pc, #48]	; (80010b4 <HAL_TIM_MspPostInit+0x5c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800108a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800108e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f7ff f8fd 	bl	8000294 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_PARTIAL();
 800109a:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <HAL_TIM_MspPostInit+0x60>)
 800109c:	6853      	ldr	r3, [r2, #4]
 800109e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80010a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80010a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010aa:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010ac:	b006      	add	sp, #24
 80010ae:	bd10      	pop	{r4, pc}
 80010b0:	40012c00 	.word	0x40012c00
 80010b4:	40010800 	.word	0x40010800
 80010b8:	40010000 	.word	0x40010000

080010bc <NMI_Handler>:
 80010bc:	4770      	bx	lr

080010be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010be:	e7fe      	b.n	80010be <HardFault_Handler>

080010c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c0:	e7fe      	b.n	80010c0 <MemManage_Handler>

080010c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c2:	e7fe      	b.n	80010c2 <BusFault_Handler>

080010c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c4:	e7fe      	b.n	80010c4 <UsageFault_Handler>

080010c6 <SVC_Handler>:
 80010c6:	4770      	bx	lr

080010c8 <DebugMon_Handler>:
 80010c8:	4770      	bx	lr

080010ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ca:	4770      	bx	lr

080010cc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010cc:	f7ff b874 	b.w	80001b8 <HAL_IncTick>

080010d0 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <SystemInit+0x40>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	f042 0201 	orr.w	r2, r2, #1
 80010d8:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80010da:	6859      	ldr	r1, [r3, #4]
 80010dc:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <SystemInit+0x44>)
 80010de:	400a      	ands	r2, r1
 80010e0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80010e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80010ec:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010f4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80010fc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80010fe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001102:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001104:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <SystemInit+0x48>)
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000
 8001114:	f8ff0000 	.word	0xf8ff0000
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800111c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800111e:	e003      	b.n	8001128 <LoopCopyDataInit>

08001120 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001122:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001124:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001126:	3104      	adds	r1, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001128:	480a      	ldr	r0, [pc, #40]	; (8001154 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800112c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800112e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001130:	d3f6      	bcc.n	8001120 <CopyDataInit>
  ldr r2, =_sbss
 8001132:	4a0a      	ldr	r2, [pc, #40]	; (800115c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001134:	e002      	b.n	800113c <LoopFillZerobss>

08001136 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001138:	f842 3b04 	str.w	r3, [r2], #4

0800113c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800113e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001140:	d3f9      	bcc.n	8001136 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001142:	f7ff ffc5 	bl	80010d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001146:	f000 f80f 	bl	8001168 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800114a:	f7ff fedb 	bl	8000f04 <main>
  bx lr
 800114e:	4770      	bx	lr
  ldr r3, =_sidata
 8001150:	08001200 	.word	0x08001200
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001158:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800115c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001160:	2000006c 	.word	0x2000006c

08001164 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001164:	e7fe      	b.n	8001164 <ADC1_2_IRQHandler>
	...

08001168 <__libc_init_array>:
 8001168:	b570      	push	{r4, r5, r6, lr}
 800116a:	2500      	movs	r5, #0
 800116c:	4e0c      	ldr	r6, [pc, #48]	; (80011a0 <__libc_init_array+0x38>)
 800116e:	4c0d      	ldr	r4, [pc, #52]	; (80011a4 <__libc_init_array+0x3c>)
 8001170:	1ba4      	subs	r4, r4, r6
 8001172:	10a4      	asrs	r4, r4, #2
 8001174:	42a5      	cmp	r5, r4
 8001176:	d109      	bne.n	800118c <__libc_init_array+0x24>
 8001178:	f000 f822 	bl	80011c0 <_init>
 800117c:	2500      	movs	r5, #0
 800117e:	4e0a      	ldr	r6, [pc, #40]	; (80011a8 <__libc_init_array+0x40>)
 8001180:	4c0a      	ldr	r4, [pc, #40]	; (80011ac <__libc_init_array+0x44>)
 8001182:	1ba4      	subs	r4, r4, r6
 8001184:	10a4      	asrs	r4, r4, #2
 8001186:	42a5      	cmp	r5, r4
 8001188:	d105      	bne.n	8001196 <__libc_init_array+0x2e>
 800118a:	bd70      	pop	{r4, r5, r6, pc}
 800118c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001190:	4798      	blx	r3
 8001192:	3501      	adds	r5, #1
 8001194:	e7ee      	b.n	8001174 <__libc_init_array+0xc>
 8001196:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800119a:	4798      	blx	r3
 800119c:	3501      	adds	r5, #1
 800119e:	e7f2      	b.n	8001186 <__libc_init_array+0x1e>
 80011a0:	080011f8 	.word	0x080011f8
 80011a4:	080011f8 	.word	0x080011f8
 80011a8:	080011f8 	.word	0x080011f8
 80011ac:	080011fc 	.word	0x080011fc

080011b0 <memset>:
 80011b0:	4603      	mov	r3, r0
 80011b2:	4402      	add	r2, r0
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d100      	bne.n	80011ba <memset+0xa>
 80011b8:	4770      	bx	lr
 80011ba:	f803 1b01 	strb.w	r1, [r3], #1
 80011be:	e7f9      	b.n	80011b4 <memset+0x4>

080011c0 <_init>:
 80011c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011c2:	bf00      	nop
 80011c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011c6:	bc08      	pop	{r3}
 80011c8:	469e      	mov	lr, r3
 80011ca:	4770      	bx	lr

080011cc <_fini>:
 80011cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011ce:	bf00      	nop
 80011d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011d2:	bc08      	pop	{r3}
 80011d4:	469e      	mov	lr, r3
 80011d6:	4770      	bx	lr
